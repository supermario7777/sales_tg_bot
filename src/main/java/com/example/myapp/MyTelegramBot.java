package com.example.myapp;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class MyTelegramBot extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(MyTelegramBot.class);
    private static String botUsername;
    private static String botToken;

    static {
        botUsername = System.getenv("BOT_USERNAME");
        botToken = System.getenv("BOT_TOKEN");

        if (botUsername == null || botToken == null) {
            logger.error("BOT_USERNAME –∏–ª–∏ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
        } else {
            logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
            if (message.getChat().isGroupChat() || message.getChat().isSuperGroupChat()) {
                long chatId = message.getChatId();
                String userMessage = message.getText();

                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: " + userMessage);

                // –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º.");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
            else if (message.getChat().isUserChat()) {
                long chatId = message.getChatId();
                sendResponseWithButtons(chatId);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        switch (callbackData) {
            case "about_us":
                sendAboutUs(chatId);
                break;
            case "catalogs":
                sendCatalogs(chatId);
                break;
            case "contacts":
                sendContacts(chatId);
                break;
            case "catalog_dentistry":
                sendSubcategories(chatId, "catalog_dentistry");
                break;
            case "catalog_electronics":
                sendSubcategories(chatId, "catalog_electronics");
                break;
            case "subcategory_tools":
                sendPdfFile(chatId, "files/dentistry_tools.pdf");
                break;
            case "subcategory_meds":
                sendPdfFile(chatId, "files/dentistry_meds.pdf");
                break;
            case "subcategory_tv":
                sendPdfFile(chatId, "files/electronics_tv.pdf");
                break;
            case "subcategory_audio":
                sendPdfFile(chatId, "files/electronics_audio.pdf");
                break;
            default:
                logger.warn("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + callbackData);
                break;
        }
    }

    private void sendResponseWithButtons(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! üåü –ß–µ–º –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å? üôÇ");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton aboutUsButton = new InlineKeyboardButton();
        aboutUsButton.setText("\uD83D\uDCD8 –û –Ω–∞—Å");
        aboutUsButton.setCallbackData("about_us");
        row1.add(aboutUsButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton catalogsButton = new InlineKeyboardButton();
        catalogsButton.setText("\uD83D\uDCC2 –ö–∞—Ç–∞–ª–æ–≥–∏");
        catalogsButton.setCallbackData("catalogs");
        row2.add(catalogsButton);

        InlineKeyboardButton contactsButton = new InlineKeyboardButton();
        contactsButton.setText("\uD83D\uDCDE –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã");
        contactsButton.setCallbackData("contacts");
        row2.add(contactsButton);

        buttons.add(row1);
        buttons.add(row2);

        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏", e);
        }
    }

    private void sendCatalogs(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–∞—Ç–∞–ª–æ–≥:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton dentistryButton = new InlineKeyboardButton();
        dentistryButton.setText("\uD83E\uDDB7 –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è");
        dentistryButton.setCallbackData("catalog_dentistry");
        row1.add(dentistryButton);

        InlineKeyboardButton electronicsButton = new InlineKeyboardButton();
        electronicsButton.setText("\uD83D\uDCFA –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞");
        electronicsButton.setCallbackData("catalog_electronics");
        row1.add(electronicsButton);

        buttons.add(row1);
        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤", e);
        }
    }

    private void sendSubcategories(long chatId, String category) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        if ("catalog_dentistry".equals(category)) {
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton toolsButton = new InlineKeyboardButton();
            toolsButton.setText("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã");
            toolsButton.setCallbackData("subcategory_tools");
            row1.add(toolsButton);

            InlineKeyboardButton medsButton = new InlineKeyboardButton();
            medsButton.setText("üíä –ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã");
            medsButton.setCallbackData("subcategory_meds");
            row1.add(medsButton);

            buttons.add(row1);
        } else if ("catalog_electronics".equals(category)) {
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton tvButton = new InlineKeyboardButton();
            tvButton.setText("üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã");
            tvButton.setCallbackData("subcategory_tv");
            row1.add(tvButton);

            InlineKeyboardButton audioButton = new InlineKeyboardButton();
            audioButton.setText("üéµ –ê—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞");
            audioButton.setCallbackData("subcategory_audio");
            row1.add(audioButton);

            buttons.add(row1);
        }

        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π", e);
        }
    }

    private void sendPdfFile(long chatId, String filePath) {
        try {
            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(filePath);
            if (inputStream == null) {
                logger.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + filePath);
                return;
            }
            InputFile inputFile = new InputFile(inputStream, filePath.substring(filePath.lastIndexOf("/") + 1));

            org.telegram.telegrambots.meta.api.methods.send.SendDocument sendDocument = new org.telegram.telegrambots.meta.api.methods.send.SendDocument();
            sendDocument.setChatId(String.valueOf(chatId));
            sendDocument.setDocument(inputFile);

            execute(sendDocument);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF —Ñ–∞–π–ª–∞", e);
        }
    }

    private void sendAboutUs(long chatId) {
        sendMessage(chatId, "–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ù–µ –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –ø–æ–º–æ–∂–µ–º!");
    }

    private void sendContacts(long chatId) {
        sendMessage(chatId, "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\nWhatsApp: https://wa.me/message/57ZPJGS2KXYND1\nInstagram: https://www.instagram.com/mai_china_tovar?igshid=cGJjZzF2MGVwMm5p&utm_source=qr");
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new MyTelegramBot());
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", e);
        }
    }
}
