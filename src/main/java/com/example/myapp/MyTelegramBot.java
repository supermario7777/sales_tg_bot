package com.example.myapp;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
//import io.github.cdimascio.dotenv.Dotenv;


import java.util.ArrayList;
import java.util.List;

public class MyTelegramBot extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(MyTelegramBot.class);
    private static String botUsername;
    private static String botToken;

    static {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
//        Dotenv dotenv = Dotenv.load();
//        botUsername = dotenv.get("BOT_USERNAME");
//        botToken = dotenv.get("BOT_TOKEN");

        botUsername="thisisforexample_bot";
        botToken="7821010099:AAFhSE8jbg_4S56Qldr3mffw_rP-t2ecSIE";

        if (botUsername == null || botToken == null) {
            logger.error("BOT_USERNAME –∏–ª–∏ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
        } else {
            logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            sendResponseWithButtons(message.getChatId());
        }

        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            switch (callbackData) {
                case "about_us":
                    sendAboutUs(chatId);
                    break;
                case "welcome":
                    sendWelcomeText(chatId);
                    break;
                case "catalogs":
                    sendCatalogs(chatId);
                    break;
                case "contacts":
                    sendContacts(chatId);
                    break;
                default:
                    break;
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    private void sendResponseWithButtons(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! üåü –ß–µ–º –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å? üôÇ");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton aboutUsButton = new InlineKeyboardButton();
        aboutUsButton.setText("\uD83D\uDCD8 –û –Ω–∞—Å");
        aboutUsButton.setCallbackData("about_us");
        row1.add(aboutUsButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton catalogsButton = new InlineKeyboardButton();
        catalogsButton.setText("\uD83D\uDCC2 –ö–∞—Ç–∞–ª–æ–≥–∏");
        catalogsButton.setCallbackData("catalogs");
        row2.add(catalogsButton);

        InlineKeyboardButton contactsButton = new InlineKeyboardButton();
        contactsButton.setText("\uD83D\uDCDE –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã");
        contactsButton.setCallbackData("contacts");
        row2.add(contactsButton);

        buttons.add(row1);
        buttons.add(row2);

        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏", e);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    private void sendAboutUs(long chatId) {
        sendMessage(chatId, "–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ù–µ –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –ø–æ–º–æ–∂–µ–º!");
    }

    private void sendWelcomeText(long chatId) {
        sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! üåü –ß–µ–º –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å? üôÇ");
    }

    private void sendCatalogs(long chatId) {
        sendMessage(chatId, "üìÇ –ù–∞—à–∏ –∫–∞—Ç–∞–ª–æ–≥–∏:\n\n" +
                "ü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è\n" +
                "üì∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n" +
                "üöó –í—Å–µ –¥–ª—è –∞–≤—Ç–æ");
    }

    private void sendContacts(long chatId) {
        sendMessage(chatId, "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\nWhatsApp: https://wa.me/message/57ZPJGS2KXYND1\nInstagram: https://www.instagram.com/mai_china_tovar?igshid=cGJjZzF2MGVwMm5p&utm_source=qr");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new MyTelegramBot());
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", e);
        }
    }
}
